<template>
<el-container id="tableWidget">

  <!-- tags -->
	<el-header  class="tag-header">
		<el-tag
		  v-for="tag in tags"
		  :key="tag.name"
		  color="transparent"
		  size="mini"
		  class="tag">
		  {{tag.name + '(' + tag.number + ')'}}
		</el-tag>
	</el-header>

	<!-- 搜索栏 -->
	<el-header class="header" height="76px">
		<el-row :gutter="20">
			<el-col :span="22" style="padding-right: 0">
				<el-input placeholder="请输入内容" id="header_input"></el-input>
      </el-col>
			<el-col :span="2" style="padding: 0">
				<el-button type="danger" style=" background: #ed0536">搜索</el-button>
      </el-col>
		</el-row>
	</el-header>

	<!-- 列表 list or table -->
	<el-main class="main">
		<el-table
		  ref="multipleTable"
		  :data="data"
		  :stripe="true"
		  :border="true"
		  max-height="520"
		  :row-style="{height:'40px'}"
		  :header-row-style="{background: '#f2f4f7', height: '46px'}"
		  @selection-change="handleSelectionChange"
		  style="width: 100%">

		  <!-- 复选框 -->
			<!-- <el-table-column
		      type="selection"
		      :selectable="selectable"
		      width="55">
		    </el-table-column> -->

			<!-- thead -->
			<el-table-column v-for="(item, index) in thead"
			  :key="index"
			  :prop="item.prop"
			  :label="item.label"
			  :min-width="item.minWidth ? item.minWidth : 120"
		      :fixed="item.fixed ? item.fixed : false">
			</el-table-column>

			<!-- 操作按钮栏 -->
			<el-table-column v-if="controButton.length>0"
			  label="操作"
			  min-width="200"
			  fixed="right">
				<template slot-scope="scope">
					<el-button v-for="(item, index) in controButton"
					  :key="index"
					  @click.native.prevent="deleteRow(scope.$index, data)"
					  type="text"
					  size="small">
						{{item.name}}
					</el-button>
				</template>
			</el-table-column>

		</el-table>
	</el-main>

 	<el-footer class="footer block" height="50px">

		<el-row>
			<!-- 控制按钮 -->
			<el-col :span="10"><div class="grid-content bg-purple">

				<!-- <el-checkbox @change="toggleSelection(data)"></el-checkbox> -->
				<el-button type="small">批量通过</el-button>
				<el-button type="small">批量拒绝</el-button>
				<el-button type="small">批量上架</el-button>
				<el-button type="small">批量下架</el-button>
				<!-- <el-button type="small" @click="toggleSelection([tableData[1], tableData[2]])">切换第三</el-button>
				<el-button type="small" @click="toggleSelection()">取消选择</el-button> -->
			</div></el-col>

			<!-- 分页器 -->
			<el-col :span="14"><div class="grid-content bg-purple-light">
				<el-pagination
				  @size-change="handleSizeChange"
				  @current-change="handleCurrentChange"
				  :current-page="currentPage4"
				  :page-sizes="[100, 200, 300, 400]"
				  :page-size="100"
				  layout="total, sizes, prev, pager, next, jumper"
				  :total="400">
				</el-pagination>
			</div></el-col>
		</el-row>
	    
	       
	</el-footer>

</el-container>
</template>

<script>
export default {
  name: "TableWidget",
  props: {
    tableOption: {
      type: Object,
      default: {
        tags: [],
        thead: [],
        controButton: [],
        data: [],
        selectAll: false
      },
      required: true
    }
  },
  data() {
    return {
      // tableData: Array(30).fill(tableData),
      tags: [],
      thead: [],
      controButton: [],
      data: [],
      currentPage1: 5,
      currentPage2: 5,
      currentPage3: 5,
      currentPage4: 4,
      multipleSelection: [],
      selectAll: false // 全选 or 全不选
    };
  },
  methods: {
    // table删出事件
    deleteRow(index, rows) {
      console.log(index, rows);
      rows.splice(index, 1);
    },
    // table多选
    toggleSelection(rows) {
      //	根据当前状态， 决定是否全选
      if (this.selectAll) {
        rows.forEach(row => {
          this.$refs.multipleTable.toggleRowSelection(row, "selected");
        });
      } else {
        this.$refs.multipleTable.clearSelection();
      }
      this.selectAll = !this.selectAll;
    },
    // 当table复选框发生变化时触发此函数
    handleSelectionChange(val) {
      this.multipleSelection = val;
    },
    // 返回一个 多选框 的状态（是否可用）
    selectable(row, index) {
      // console.log(row, index)
      return this.selectAll;
    },

    //分页器
    handleSizeChange(val) {
      console.log(`每页 ${val} 条`);
    },
    handleCurrentChange(val) {
      console.log(`当前页: ${val}`);
    }
  },
  created() {
    const { tableOption } = this.$props;
    if (tableOption && tableOption.tags) {
      this.tags = tableOption.tags;
    }
    if (tableOption && tableOption.thead) {
      this.thead = tableOption.thead;
    }
    if (tableOption && tableOption.controButton) {
      this.controButton = tableOption.controButton;
    }
    if (tableOption && tableOption.data) {
      this.data = tableOption.data;
    }
    if (tableOption && tableOption.data) {
      this.selectAll = tableOption.selectAll;
    }
  }
};
</script>

<style scoped>
.el-tag--mini {
  line-height: 20px;
}

#tableWidget {
  overflow: hidden;
  /*padding:20px ;*/
  background: #f2f3f5;
}

#tableWidget > .header,
#tableWidget > .main,
#tableWidget > .footer {
  background: #fff;
}

/* 搜索栏 */
#tableWidget > .header {
  line-height: 76px;
}

/* list or table */
#tableWidget > .main {
  margin-top: 14px;
}

/* tag标签 */
.tag {
  border: 0;
  color: #999;
  cursor: pointer;
}
.tag:hover {
  color: red;
}
.tagActive {
  color: red;
}

.tag-header {
  margin: 0 0 20px 0;
  padding: 0px;
  height: 20px !important;
}
.tag-header:empty {
  display: none;
}
</style>